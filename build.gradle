/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    //jacoco plugin
    id 'jacoco'

    //the pmd plugin for code quality
    id 'pmd'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()

    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.1-jre'

    // This dependency is used to consume json files
    compile 'com.googlecode.json-simple:json-simple:1.1.1'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.2'
}

application {
    // Define the main class for the application.
    mainClassName = 'HauntedHouse.App'
}

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("$buildDir/jacocoHtml")
    }
}

jar {
    manifest {
        attributes(
                "Main-Class": "HauntedHouse.App",
                "Built-by" : "Jorge Moreira, Miguel Costa",
                "Scope" : "Trabalho Estrutura de Dados"

        )
    }

    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }

}

pmd {
    ignoreFailures = true
    pmdTest.enabled= true
    ruleSets = [
            'java-basic',
            'java-braces'
    ]
}

task srcJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("Javadocs/sourceJavadoc")
}

task testsJavadoc(type: Javadoc) {
    source = sourceSets.test.allJava
    classpath = sourceSets.test.compileClasspath
    destinationDir = file("Javadocs/testsJavadoc")
}

test.finalizedBy(jacocoTestReport, jar, srcJavadoc, testsJavadoc)